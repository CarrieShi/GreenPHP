<?php/*** 默认视图类* 如果该类不能满足需求时只需继承重写所需功能* @Author Leon(tmkook@gmail.com)* @Copyright GreenPHP* @Version $Id$*/class Tpl{    /**    * 视图配置    *    * @param $conf array(path:模板目录,compile:临时目录,lifetime:缓存时间)    */    protected $conf = array();    	/**	* 初始化视图配置	*	* @param array $conf 配置内容 	* @return @	*/    public function __construct($conf){        $this->conf = $conf;    }    	/**	* 加载解析后的模板文件	*	* @param string $tpl 模板名    * @param array $data 模板数据	* @return @	*/    public function display($tpl,$viewAssignData=array()){        $temp = $this->parseView($tpl);        extract($viewAssignData,EXTR_SKIP);                include $temp;    }    	/**	* 正则解析模板并生成临时文件	*	* @param string $tpl 模板名	* @return string 解析后的模板路径	*/    protected function parseView($tpl){        $temp = rtrim($this->conf['compile'],'/')."/{$tpl}";        if(file_exists($temp)){            $expire = filemtime($temp);            if($this->conf['lifetime'] > 0 && (time() - $expire < $this->conf['lifetime'])) {                return $temp;            }        }        $str = $this->GetViewContents("{$this->conf['path']}/{$tpl}");        $str = preg_replace("/\{widget:controller=(\w*)\&action=(\w*)(?:\&mod=(\w*))?\}/", "<?php \$this->widget('\\1','\\2','\\3') ?>", $str);        $str = preg_replace("/\<\!\-\-\{(.+?)\}\-\-\>/s","<?php \\1 ?>", $str);        $str = preg_replace("/\{(\@?\\\$[a-zA-Z_][\\\$\w]*(?:\[[\w\-\.\"\'\[\]\$]+\])*)\}/", "<?php echo \\1 ?>", $str);        $str = preg_replace("/\{([A-Z0-9_]+)\}/", "<?php echo \\1 ?>", $str);		/*$str = preg_replace("/\{uri (.*+)\}/", "<?php echo Segment::build(\\1) ?>", $str);*/        $this->PutViewContents($temp,$str);        return $temp;    }	/**	 * 根据指定的路径创建不存在的文件夹	 *	 * @param  string  $path 目录路径	 * @return boolean	 */	protected function makeTempDir($path) {        $path = str_replace(array ('/','\\','//','\\\\'), '/', $path);		$dirs = explode('/', $path);        $tmp = '';		foreach ($dirs as $dir) {			$tmp .= $dir . '/';			if (!file_exists($tmp) && !@ mkdir($tmp, 0777)) return $tmp;		}		return true;	}    	/**	* 安全写入内容，确保写入时不会造成并发冲突	*	* @param string $filename 文件	* @param string $content  写入内容	* @return boolean	*/	protected function PutViewContents($filename,$content) {        //$this->makeTempDir($this->conf['compile']);        $makedir = dirname($filename);		if($makedir != '.' && !empty($makedir)) $this->makeTempDir(dirname($filename));        $fp = fopen($filename, 'wb');        if ( ! $fp) throw new Exception("临时文件打开失败");        flock($fp, LOCK_EX);        fwrite($fp, $content);        flock($fp, LOCK_UN);        fclose($fp);        return true;	}    	/**	* 用共享锁模式打开文件并读取内容，避免在并发写入造成的读取不完整问题	*	* @param string $filename 文件	*	* @return mixed	*/	protected function GetViewContents($filename) {        $fp = fopen($filename, 'rb');        if ( ! $fp) throw new Exception("视图不存在");        flock($fp, LOCK_SH);        clearstatcache();        $filesize = filesize($filename);        if ($filesize > 0) {            $data = fread($fp, $filesize);        }        flock($fp, LOCK_UN);        fclose($fp);        return $data;	}}